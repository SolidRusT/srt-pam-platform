type Player {
  id: ID!
  email: String!
  username: String!
  profile: Profile
  sessions: [Session!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Profile {
  id: ID!
  playerId: ID!
  displayName: String
  avatar: String
  preferences: JSON
  updatedAt: DateTime!
}

type Session {
  id: ID!
  playerId: ID!
  lastActive: DateTime!
  expiresAt: DateTime!
  userAgent: String
  ipAddress: String
  createdAt: DateTime!
}

type AuthResponse {
  accessToken: String!
  refreshToken: String!
  player: Player!
}

type TokenResponse {
  accessToken: String!
  refreshToken: String!
}

type ServerInfo {
  status: String!
  version: String!
  timestamp: String!
}

input RegisterInput {
  email: String!
  password: String!
  username: String!
}

input LoginInput {
  email: String!
  password: String!
}

type ResetPasswordResponse {
  success: Boolean!
  message: String!
}

type VerifyResetTokenResponse {
  valid: Boolean!
  email: String
}

input ResetPasswordInput {
  token: String!
  newPassword: String!
}

scalar DateTime
scalar JSON

type Query {
  me: Player                           # Get current authenticated player
  serverInfo: ServerInfo              # Get server status information
  activeSessions: [Session!]!         # Get all active sessions for current player
  verifyResetToken(token: String!): VerifyResetTokenResponse!  # Verify password reset token
}

type Mutation {
  # Authentication
  register(input: RegisterInput!): AuthResponse!
  login(input: LoginInput!): AuthResponse!
  logout(refreshToken: String!): Boolean!
  refreshToken(token: String!): TokenResponse!
  
  # Session Management
  revokeSession(sessionId: ID!): Boolean!
  revokeAllSessions(exceptCurrentSession: Boolean): Boolean!

  # Password Reset
  requestPasswordReset(email: String!): Boolean!
  resetPassword(input: ResetPasswordInput!): ResetPasswordResponse!
}